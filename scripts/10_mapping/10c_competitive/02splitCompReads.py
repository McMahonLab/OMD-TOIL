###############################################################################
# splitCompReads.py
# Copyright (c) 2015, Joshua J Hamilton and Katherine D McMahon
# Affiliation: Department of Bacteriology
#              University of Wisconsin-Madison, Madison, Wisconsin, USA
# URL: http://http://mcmahonlab.wisc.edu/
# All rights reserved.
################################################################################
# Take the aggregated *.out files generated by competitive mapping. Write the
# results for each MT-genome-feature type to its own file.
################################################################################

#%%#############################################################################
### Import packages
################################################################################

import os
import pandas as pd
import re

#%%#############################################################################
### Static folder structure
################################################################################
# Define fixed input and output files
genomeFolder = '../../../data/refGenomes/fna'
gffFolder = '../../../data/refGenomes/gff'
sampleFolder = '../../../data/rawData/'
countFolder = '../../../data/derivedData/mapping/competitive/readCounts'

#%%#############################################################################
### Step 0 - Read in list of MTs and Genomes for processing
################################################################################

# Read in list of MTs
mtList = []
for mt in os.listdir(sampleFolder):
    if mt.startswith('.'):
        next
    else:
       mtList.append(mt)

#%%#############################################################################
### Step 1 - Use the GFF files to determine the IMG OID associated with each
### locus tag.
################################################################################

linkerDict = {}
for gff in os.listdir(gffFolder):
    if gff.startswith('.') or gff.startswith('merged'):
        next
    else:
        # Grab the IMG OID
        OID = gff.replace('.gff', '')
        # Open the 2nd line of the file
        # Grab the locus tag
        gffFile = open(gffFolder+'/'+gff)
        lines = gffFile.readlines()
        locusTag = lines[1].split('_')[0]
        gffFile.close()
        # Create a dict entry
        linkerDict[locusTag] = OID

# Create a manual entry for the internal standard
linkerDict['pFN18A'] = 'pFN18A_DNA_transcript'

#%%#############################################################################
### Step 2 - Loop over each *.out file. Use the gff dict to assign the IMG OID
### to each row. Use groupby to group by locus tag. Use gff dict to find IMG OID
### of each locus tag and write to individual files.
################################################################################
featureList = ['CDS', 'rRNA', 'tRNA', 'RNA']
#featureList = ['rRNA']

for feature in featureList:
    for mt in mtList:
# Read in the CSV file
        countDF = pd.read_csv(countFolder+'/'+mt+'.'+feature+'.out', sep='\t', names=['Index', 'Count'])
# Duplicate the index column to a locus tag column and split along the '_' character. This defines the
# locus tag which will be used to group the count data.
        countDF['Locus Tag'] = countDF['Index']
        countDF['Locus Tag'] = countDF['Locus Tag'].apply(lambda x : pd.Series(x.split('_')))[0]
# Define index column as an index for outputting later
        countDF.index = countDF['Index']
        countDF = countDF.drop('Index', axis = 1)
# Drop the last five rows as they map to ambiguous reads
        countDF = countDF.ix[:-5]

# Split the DF into a number of DFs based on the locus tag column
        countGroup = countDF.groupby('Locus Tag')
        for genomeCount in countGroup:
# Look up the genome name
            genome = linkerDict[genomeCount[1]['Locus Tag'][0]]
# Look up the appropriate genome and drop the 'Locus Tag' column
            genomeCount = genomeCount[1].drop('Locus Tag', axis = 1)
# Write to file
            genomeCount.to_csv(countFolder+'/'+mt+'-'+genome+'.'+feature+'.out', sep='\t', header=False)
